/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.39
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" } };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#define SWIG_FILE_WITH_INIT
#include "../../typedefs.h"
#include "../../graph_exceptions.h"
#include "../../graph.h"
#include "../../directedgraph.h"
#include "../../undirectedgraph.h"
#include "../../gexf.h"


#include <stdexcept>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_org_gephi_libgexf_libgexfJNI_new_1ReadLockException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::string arg1 ;
  std::string const *argp1 ;
  libgexf::ReadLockException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(std::string **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string const");
    return 0;
  }
  arg1 = *argp1; 
  result = (libgexf::ReadLockException *)new libgexf::ReadLockException(arg1);
  *(libgexf::ReadLockException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gephi_libgexf_libgexfJNI_delete_1ReadLockException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libgexf::ReadLockException *arg1 = (libgexf::ReadLockException *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libgexf::ReadLockException **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_org_gephi_libgexf_libgexfJNI_ReadLockException_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libgexf::ReadLockException *arg1 = (libgexf::ReadLockException *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libgexf::ReadLockException **)&jarg1; 
  result = (char *)((libgexf::ReadLockException const *)arg1)->what();
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gephi_libgexf_libgexfJNI_new_1WriteLockException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::string arg1 ;
  std::string const *argp1 ;
  libgexf::WriteLockException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(std::string **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string const");
    return 0;
  }
  arg1 = *argp1; 
  result = (libgexf::WriteLockException *)new libgexf::WriteLockException(arg1);
  *(libgexf::WriteLockException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gephi_libgexf_libgexfJNI_delete_1WriteLockException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libgexf::WriteLockException *arg1 = (libgexf::WriteLockException *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libgexf::WriteLockException **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_org_gephi_libgexf_libgexfJNI_WriteLockException_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  libgexf::WriteLockException *arg1 = (libgexf::WriteLockException *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libgexf::WriteLockException **)&jarg1; 
  result = (char *)((libgexf::WriteLockException const *)arg1)->what();
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gephi_libgexf_libgexfJNI_MessageExceptionBuilder_1buildString(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  std::string arg1 ;
  libgexf::t_id arg2 ;
  std::string *argp1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(std::string **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (libgexf::t_id)jarg2; 
  result = libgexf::MessageExceptionBuilder::buildString(arg1,arg2);
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gephi_libgexf_libgexfJNI_MessageExceptionBuilder_1abstractClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libgexf::MessageExceptionBuilder *arg1 = (libgexf::MessageExceptionBuilder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libgexf::MessageExceptionBuilder **)&jarg1; 
  (arg1)->abstractClass();
}


SWIGEXPORT void JNICALL Java_org_gephi_libgexf_libgexfJNI_delete_1MessageExceptionBuilder(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libgexf::MessageExceptionBuilder *arg1 = (libgexf::MessageExceptionBuilder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libgexf::MessageExceptionBuilder **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_gephi_libgexf_libgexfJNI_new_1Graph_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libgexf::Graph *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libgexf::Graph *)new libgexf::Graph();
  *(libgexf::Graph **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gephi_libgexf_libgexfJNI_new_1Graph_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libgexf::Graph *arg1 = 0 ;
  libgexf::Graph *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libgexf::Graph **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libgexf::Graph const & reference is null");
    return 0;
  } 
  result = (libgexf::Graph *)new libgexf::Graph((libgexf::Graph const &)*arg1);
  *(libgexf::Graph **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gephi_libgexf_libgexfJNI_delete_1Graph(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libgexf::Graph *arg1 = (libgexf::Graph *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libgexf::Graph **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_gephi_libgexf_libgexfJNI_Graph_1addNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libgexf::Graph *arg1 = (libgexf::Graph *) 0 ;
  libgexf::t_id arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libgexf::Graph **)&jarg1; 
  arg2 = (libgexf::t_id)jarg2; 
  (arg1)->addNode(arg2);
}


SWIGEXPORT void JNICALL Java_org_gephi_libgexf_libgexfJNI_Graph_1addEdge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  libgexf::Graph *arg1 = (libgexf::Graph *) 0 ;
  libgexf::t_id arg2 ;
  libgexf::t_id arg3 ;
  libgexf::t_id arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libgexf::Graph **)&jarg1; 
  arg2 = (libgexf::t_id)jarg2; 
  arg3 = (libgexf::t_id)jarg3; 
  arg4 = (libgexf::t_id)jarg4; 
  (arg1)->addEdge(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_gephi_libgexf_libgexfJNI_Graph_1removeNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libgexf::Graph *arg1 = (libgexf::Graph *) 0 ;
  libgexf::t_id arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libgexf::Graph **)&jarg1; 
  arg2 = (libgexf::t_id)jarg2; 
  (arg1)->removeNode(arg2);
}


SWIGEXPORT void JNICALL Java_org_gephi_libgexf_libgexfJNI_Graph_1removeEdge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  libgexf::Graph *arg1 = (libgexf::Graph *) 0 ;
  libgexf::t_id arg2 ;
  libgexf::t_id arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libgexf::Graph **)&jarg1; 
  arg2 = (libgexf::t_id)jarg2; 
  arg3 = (libgexf::t_id)jarg3; 
  (arg1)->removeEdge(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_gephi_libgexf_libgexfJNI_Graph_1removeInEdges(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libgexf::Graph *arg1 = (libgexf::Graph *) 0 ;
  libgexf::t_id arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libgexf::Graph **)&jarg1; 
  arg2 = (libgexf::t_id)jarg2; 
  (arg1)->removeInEdges(arg2);
}


SWIGEXPORT void JNICALL Java_org_gephi_libgexf_libgexfJNI_Graph_1removeOutEdges(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libgexf::Graph *arg1 = (libgexf::Graph *) 0 ;
  libgexf::t_id arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libgexf::Graph **)&jarg1; 
  arg2 = (libgexf::t_id)jarg2; 
  (arg1)->removeOutEdges(arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_gephi_libgexf_libgexfJNI_Graph_1containsNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  libgexf::Graph *arg1 = (libgexf::Graph *) 0 ;
  libgexf::t_id arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libgexf::Graph **)&jarg1; 
  arg2 = (libgexf::t_id)jarg2; 
  result = (bool)((libgexf::Graph const *)arg1)->containsNode(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_gephi_libgexf_libgexfJNI_Graph_1containsEdge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  libgexf::Graph *arg1 = (libgexf::Graph *) 0 ;
  libgexf::t_id arg2 ;
  libgexf::t_id arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libgexf::Graph **)&jarg1; 
  arg2 = (libgexf::t_id)jarg2; 
  arg3 = (libgexf::t_id)jarg3; 
  result = (bool)((libgexf::Graph const *)arg1)->containsEdge(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gephi_libgexf_libgexfJNI_Graph_1getNodeCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libgexf::Graph *arg1 = (libgexf::Graph *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libgexf::Graph **)&jarg1; 
  result = (unsigned int)((libgexf::Graph const *)arg1)->getNodeCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gephi_libgexf_libgexfJNI_Graph_1getEdgeCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libgexf::Graph *arg1 = (libgexf::Graph *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libgexf::Graph **)&jarg1; 
  result = (unsigned int)((libgexf::Graph const *)arg1)->getEdgeCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gephi_libgexf_libgexfJNI_Graph_1getDegree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  libgexf::Graph *arg1 = (libgexf::Graph *) 0 ;
  libgexf::t_id arg2 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libgexf::Graph **)&jarg1; 
  arg2 = (libgexf::t_id)jarg2; 
  result = (unsigned int)((libgexf::Graph const *)arg1)->getDegree(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gephi_libgexf_libgexfJNI_Graph_1getNeighbors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  libgexf::Graph *arg1 = (libgexf::Graph *) 0 ;
  libgexf::t_id arg2 ;
  std::set< libgexf::t_id > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libgexf::Graph **)&jarg1; 
  arg2 = (libgexf::t_id)jarg2; 
  result = ((libgexf::Graph const *)arg1)->getNeighbors(arg2);
  *(std::set< libgexf::t_id > **)&jresult = new std::set< libgexf::t_id >((const std::set< libgexf::t_id > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gephi_libgexf_libgexfJNI_Graph_1clearEdges_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  libgexf::Graph *arg1 = (libgexf::Graph *) 0 ;
  libgexf::t_id arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libgexf::Graph **)&jarg1; 
  arg2 = (libgexf::t_id)jarg2; 
  (arg1)->clearEdges(arg2);
}


SWIGEXPORT void JNICALL Java_org_gephi_libgexf_libgexfJNI_Graph_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libgexf::Graph *arg1 = (libgexf::Graph *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libgexf::Graph **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_org_gephi_libgexf_libgexfJNI_Graph_1clearEdges_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libgexf::Graph *arg1 = (libgexf::Graph *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libgexf::Graph **)&jarg1; 
  (arg1)->clearEdges();
}


SWIGEXPORT void JNICALL Java_org_gephi_libgexf_libgexfJNI_Graph_1readLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libgexf::Graph *arg1 = (libgexf::Graph *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libgexf::Graph **)&jarg1; 
  try {
    (arg1)->readLock();
  }
  catch(libgexf::ReadLockException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ libgexf::ReadLockException exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void JNICALL Java_org_gephi_libgexf_libgexfJNI_Graph_1readUnlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libgexf::Graph *arg1 = (libgexf::Graph *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libgexf::Graph **)&jarg1; 
  (arg1)->readUnlock();
}


SWIGEXPORT void JNICALL Java_org_gephi_libgexf_libgexfJNI_Graph_1writeLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libgexf::Graph *arg1 = (libgexf::Graph *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libgexf::Graph **)&jarg1; 
  try {
    (arg1)->writeLock();
  }
  catch(libgexf::WriteLockException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ libgexf::WriteLockException exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void JNICALL Java_org_gephi_libgexf_libgexfJNI_Graph_1writeUnlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  libgexf::Graph *arg1 = (libgexf::Graph *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libgexf::Graph **)&jarg1; 
  (arg1)->writeUnlock();
}


SWIGEXPORT jboolean JNICALL Java_org_gephi_libgexf_libgexfJNI_Graph_1isReadLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libgexf::Graph *arg1 = (libgexf::Graph *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libgexf::Graph **)&jarg1; 
  result = (bool)(arg1)->isReadLock();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_gephi_libgexf_libgexfJNI_Graph_1isWriteLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libgexf::Graph *arg1 = (libgexf::Graph *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libgexf::Graph **)&jarg1; 
  result = (bool)(arg1)->isWriteLock();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_gephi_libgexf_libgexfJNI_Graph_1isUnlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  libgexf::Graph *arg1 = (libgexf::Graph *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libgexf::Graph **)&jarg1; 
  result = (bool)(arg1)->isUnlock();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gephi_libgexf_libgexfJNI_new_1DirectedGraph_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libgexf::DirectedGraph *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libgexf::DirectedGraph *)new libgexf::DirectedGraph();
  *(libgexf::DirectedGraph **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gephi_libgexf_libgexfJNI_new_1DirectedGraph_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libgexf::DirectedGraph *arg1 = 0 ;
  libgexf::DirectedGraph *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libgexf::DirectedGraph **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libgexf::DirectedGraph const & reference is null");
    return 0;
  } 
  result = (libgexf::DirectedGraph *)new libgexf::DirectedGraph((libgexf::DirectedGraph const &)*arg1);
  *(libgexf::DirectedGraph **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gephi_libgexf_libgexfJNI_delete_1DirectedGraph(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libgexf::DirectedGraph *arg1 = (libgexf::DirectedGraph *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libgexf::DirectedGraph **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_gephi_libgexf_libgexfJNI_DirectedGraph_1getInEdges(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  libgexf::DirectedGraph *arg1 = (libgexf::DirectedGraph *) 0 ;
  libgexf::t_id arg2 ;
  std::set< libgexf::t_id > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libgexf::DirectedGraph **)&jarg1; 
  arg2 = (libgexf::t_id)jarg2; 
  result = ((libgexf::DirectedGraph const *)arg1)->getInEdges(arg2);
  *(std::set< libgexf::t_id > **)&jresult = new std::set< libgexf::t_id >((const std::set< libgexf::t_id > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gephi_libgexf_libgexfJNI_DirectedGraph_1getOutEdges(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  libgexf::DirectedGraph *arg1 = (libgexf::DirectedGraph *) 0 ;
  libgexf::t_id arg2 ;
  std::set< libgexf::t_id > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libgexf::DirectedGraph **)&jarg1; 
  arg2 = (libgexf::t_id)jarg2; 
  result = ((libgexf::DirectedGraph const *)arg1)->getOutEdges(arg2);
  *(std::set< libgexf::t_id > **)&jresult = new std::set< libgexf::t_id >((const std::set< libgexf::t_id > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gephi_libgexf_libgexfJNI_DirectedGraph_1getSuccessors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  libgexf::DirectedGraph *arg1 = (libgexf::DirectedGraph *) 0 ;
  libgexf::t_id arg2 ;
  std::set< libgexf::t_id > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libgexf::DirectedGraph **)&jarg1; 
  arg2 = (libgexf::t_id)jarg2; 
  result = ((libgexf::DirectedGraph const *)arg1)->getSuccessors(arg2);
  *(std::set< libgexf::t_id > **)&jresult = new std::set< libgexf::t_id >((const std::set< libgexf::t_id > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gephi_libgexf_libgexfJNI_DirectedGraph_1getPredecessors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  libgexf::DirectedGraph *arg1 = (libgexf::DirectedGraph *) 0 ;
  libgexf::t_id arg2 ;
  std::set< libgexf::t_id > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libgexf::DirectedGraph **)&jarg1; 
  arg2 = (libgexf::t_id)jarg2; 
  result = ((libgexf::DirectedGraph const *)arg1)->getPredecessors(arg2);
  *(std::set< libgexf::t_id > **)&jresult = new std::set< libgexf::t_id >((const std::set< libgexf::t_id > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gephi_libgexf_libgexfJNI_DirectedGraph_1getInDegree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  libgexf::DirectedGraph *arg1 = (libgexf::DirectedGraph *) 0 ;
  libgexf::t_id arg2 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libgexf::DirectedGraph **)&jarg1; 
  arg2 = (libgexf::t_id)jarg2; 
  result = (unsigned int)((libgexf::DirectedGraph const *)arg1)->getInDegree(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gephi_libgexf_libgexfJNI_DirectedGraph_1getOutDegree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  libgexf::DirectedGraph *arg1 = (libgexf::DirectedGraph *) 0 ;
  libgexf::t_id arg2 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libgexf::DirectedGraph **)&jarg1; 
  arg2 = (libgexf::t_id)jarg2; 
  result = (unsigned int)((libgexf::DirectedGraph const *)arg1)->getOutDegree(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_gephi_libgexf_libgexfJNI_DirectedGraph_1isSuccessor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  libgexf::DirectedGraph *arg1 = (libgexf::DirectedGraph *) 0 ;
  libgexf::t_id arg2 ;
  libgexf::t_id arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libgexf::DirectedGraph **)&jarg1; 
  arg2 = (libgexf::t_id)jarg2; 
  arg3 = (libgexf::t_id)jarg3; 
  result = (bool)((libgexf::DirectedGraph const *)arg1)->isSuccessor(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_gephi_libgexf_libgexfJNI_DirectedGraph_1isPredecessor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  libgexf::DirectedGraph *arg1 = (libgexf::DirectedGraph *) 0 ;
  libgexf::t_id arg2 ;
  libgexf::t_id arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libgexf::DirectedGraph **)&jarg1; 
  arg2 = (libgexf::t_id)jarg2; 
  arg3 = (libgexf::t_id)jarg3; 
  result = (bool)((libgexf::DirectedGraph const *)arg1)->isPredecessor(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gephi_libgexf_libgexfJNI_new_1UndirectedGraph_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libgexf::UndirectedGraph *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libgexf::UndirectedGraph *)new libgexf::UndirectedGraph();
  *(libgexf::UndirectedGraph **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gephi_libgexf_libgexfJNI_new_1UndirectedGraph_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libgexf::UndirectedGraph *arg1 = 0 ;
  libgexf::UndirectedGraph *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libgexf::UndirectedGraph **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libgexf::UndirectedGraph const & reference is null");
    return 0;
  } 
  result = (libgexf::UndirectedGraph *)new libgexf::UndirectedGraph((libgexf::UndirectedGraph const &)*arg1);
  *(libgexf::UndirectedGraph **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gephi_libgexf_libgexfJNI_delete_1UndirectedGraph(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libgexf::UndirectedGraph *arg1 = (libgexf::UndirectedGraph *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libgexf::UndirectedGraph **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_gephi_libgexf_libgexfJNI_new_1GEXF_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  libgexf::GEXF *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (libgexf::GEXF *)new libgexf::GEXF();
  *(libgexf::GEXF **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gephi_libgexf_libgexfJNI_new_1GEXF_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libgexf::GEXF *arg1 = 0 ;
  libgexf::GEXF *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libgexf::GEXF **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "libgexf::GEXF const & reference is null");
    return 0;
  } 
  result = (libgexf::GEXF *)new libgexf::GEXF((libgexf::GEXF const &)*arg1);
  *(libgexf::GEXF **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gephi_libgexf_libgexfJNI_delete_1GEXF(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  libgexf::GEXF *arg1 = (libgexf::GEXF *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(libgexf::GEXF **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_gephi_libgexf_libgexfJNI_GEXF_1getUndirectedGraph(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libgexf::GEXF *arg1 = (libgexf::GEXF *) 0 ;
  libgexf::UndirectedGraph *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libgexf::GEXF **)&jarg1; 
  result = (libgexf::UndirectedGraph *) &(arg1)->getUndirectedGraph();
  *(libgexf::UndirectedGraph **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gephi_libgexf_libgexfJNI_GEXF_1getDirectedGraph(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libgexf::GEXF *arg1 = (libgexf::GEXF *) 0 ;
  libgexf::DirectedGraph *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libgexf::GEXF **)&jarg1; 
  result = (libgexf::DirectedGraph *) &(arg1)->getDirectedGraph();
  *(libgexf::DirectedGraph **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gephi_libgexf_libgexfJNI_GEXF_1_1graph_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  libgexf::GEXF *arg1 = (libgexf::GEXF *) 0 ;
  libgexf::Graph *arg2 = (libgexf::Graph *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(libgexf::GEXF **)&jarg1; 
  arg2 = *(libgexf::Graph **)&jarg2; 
  if (arg1) (arg1)->_graph = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_gephi_libgexf_libgexfJNI_GEXF_1_1graph_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  libgexf::GEXF *arg1 = (libgexf::GEXF *) 0 ;
  libgexf::Graph *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(libgexf::GEXF **)&jarg1; 
  result = (libgexf::Graph *)& ((arg1)->_graph);
  *(libgexf::Graph **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gephi_libgexf_libgexfJNI_SWIGDirectedGraphUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libgexf::Graph **)&baseptr = *(libgexf::DirectedGraph **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_gephi_libgexf_libgexfJNI_SWIGUndirectedGraphUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(libgexf::Graph **)&baseptr = *(libgexf::UndirectedGraph **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

