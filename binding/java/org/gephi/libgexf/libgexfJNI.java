/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.39
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.gephi.libgexf;

class libgexfJNI {
  public final static native long new_ReadLockException(long jarg1);
  public final static native void delete_ReadLockException(long jarg1);
  public final static native String ReadLockException_what(long jarg1, ReadLockException jarg1_);
  public final static native long new_WriteLockException(long jarg1);
  public final static native void delete_WriteLockException(long jarg1);
  public final static native String WriteLockException_what(long jarg1, WriteLockException jarg1_);
  public final static native long MessageExceptionBuilder_buildString(long jarg1, long jarg2);
  public final static native void MessageExceptionBuilder_abstractClass(long jarg1, MessageExceptionBuilder jarg1_);
  public final static native void delete_MessageExceptionBuilder(long jarg1);
  public final static native long new_Graph__SWIG_0();
  public final static native long new_Graph__SWIG_1(long jarg1, Graph jarg1_);
  public final static native void delete_Graph(long jarg1);
  public final static native void Graph_addNode(long jarg1, Graph jarg1_, long jarg2);
  public final static native void Graph_addEdge(long jarg1, Graph jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native void Graph_removeNode(long jarg1, Graph jarg1_, long jarg2);
  public final static native void Graph_removeEdge(long jarg1, Graph jarg1_, long jarg2, long jarg3);
  public final static native void Graph_removeInEdges(long jarg1, Graph jarg1_, long jarg2);
  public final static native void Graph_removeOutEdges(long jarg1, Graph jarg1_, long jarg2);
  public final static native boolean Graph_containsNode(long jarg1, Graph jarg1_, long jarg2);
  public final static native boolean Graph_containsEdge(long jarg1, Graph jarg1_, long jarg2, long jarg3);
  public final static native long Graph_getNodeCount(long jarg1, Graph jarg1_);
  public final static native long Graph_getEdgeCount(long jarg1, Graph jarg1_);
  public final static native long Graph_getDegree(long jarg1, Graph jarg1_, long jarg2);
  public final static native long Graph_getNeighbors(long jarg1, Graph jarg1_, long jarg2);
  public final static native void Graph_clearEdges__SWIG_0(long jarg1, Graph jarg1_, long jarg2);
  public final static native void Graph_clear(long jarg1, Graph jarg1_);
  public final static native void Graph_clearEdges__SWIG_1(long jarg1, Graph jarg1_);
  public final static native void Graph_readLock(long jarg1, Graph jarg1_);
  public final static native void Graph_readUnlock(long jarg1, Graph jarg1_);
  public final static native void Graph_writeLock(long jarg1, Graph jarg1_);
  public final static native void Graph_writeUnlock(long jarg1, Graph jarg1_);
  public final static native boolean Graph_isReadLock(long jarg1, Graph jarg1_);
  public final static native boolean Graph_isWriteLock(long jarg1, Graph jarg1_);
  public final static native boolean Graph_isUnlock(long jarg1, Graph jarg1_);
  public final static native long new_DirectedGraph__SWIG_0();
  public final static native long new_DirectedGraph__SWIG_1(long jarg1, DirectedGraph jarg1_);
  public final static native void delete_DirectedGraph(long jarg1);
  public final static native long DirectedGraph_getInEdges(long jarg1, DirectedGraph jarg1_, long jarg2);
  public final static native long DirectedGraph_getOutEdges(long jarg1, DirectedGraph jarg1_, long jarg2);
  public final static native long DirectedGraph_getSuccessors(long jarg1, DirectedGraph jarg1_, long jarg2);
  public final static native long DirectedGraph_getPredecessors(long jarg1, DirectedGraph jarg1_, long jarg2);
  public final static native long DirectedGraph_getInDegree(long jarg1, DirectedGraph jarg1_, long jarg2);
  public final static native long DirectedGraph_getOutDegree(long jarg1, DirectedGraph jarg1_, long jarg2);
  public final static native boolean DirectedGraph_isSuccessor(long jarg1, DirectedGraph jarg1_, long jarg2, long jarg3);
  public final static native boolean DirectedGraph_isPredecessor(long jarg1, DirectedGraph jarg1_, long jarg2, long jarg3);
  public final static native long new_UndirectedGraph__SWIG_0();
  public final static native long new_UndirectedGraph__SWIG_1(long jarg1, UndirectedGraph jarg1_);
  public final static native void delete_UndirectedGraph(long jarg1);
  public final static native long new_GEXF__SWIG_0();
  public final static native long new_GEXF__SWIG_1(long jarg1, GEXF jarg1_);
  public final static native void delete_GEXF(long jarg1);
  public final static native long GEXF_getUndirectedGraph(long jarg1, GEXF jarg1_);
  public final static native long GEXF_getDirectedGraph(long jarg1, GEXF jarg1_);
  public final static native void GEXF__graph_set(long jarg1, GEXF jarg1_, long jarg2, Graph jarg2_);
  public final static native long GEXF__graph_get(long jarg1, GEXF jarg1_);
  public final static native long SWIGDirectedGraphUpcast(long jarg1);
  public final static native long SWIGUndirectedGraphUpcast(long jarg1);
}
