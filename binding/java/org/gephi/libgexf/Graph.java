/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.39
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.gephi.libgexf;

public class Graph {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected Graph(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Graph obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if(swigCPtr != 0 && swigCMemOwn) {
      swigCMemOwn = false;
      libgexfJNI.delete_Graph(swigCPtr);
    }
    swigCPtr = 0;
  }

  public Graph() {
    this(libgexfJNI.new_Graph__SWIG_0(), true);
  }

  public Graph(Graph orig) {
    this(libgexfJNI.new_Graph__SWIG_1(Graph.getCPtr(orig), orig), true);
  }

  public void addNode(long id) {
    libgexfJNI.Graph_addNode(swigCPtr, this, id);
  }

  public void addEdge(long id, long source_id, long target_id) {
    libgexfJNI.Graph_addEdge(swigCPtr, this, id, source_id, target_id);
  }

  public void removeNode(long id) {
    libgexfJNI.Graph_removeNode(swigCPtr, this, id);
  }

  public void removeEdge(long source_id, long target_id) {
    libgexfJNI.Graph_removeEdge(swigCPtr, this, source_id, target_id);
  }

  public void removeInEdges(long target_id) {
    libgexfJNI.Graph_removeInEdges(swigCPtr, this, target_id);
  }

  public void removeOutEdges(long source_id) {
    libgexfJNI.Graph_removeOutEdges(swigCPtr, this, source_id);
  }

  public boolean containsNode(long id) {
    return libgexfJNI.Graph_containsNode(swigCPtr, this, id);
  }

  public boolean containsEdge(long source_id, long target_id) {
    return libgexfJNI.Graph_containsEdge(swigCPtr, this, source_id, target_id);
  }

  public long getNodeCount() {
    return libgexfJNI.Graph_getNodeCount(swigCPtr, this);
  }

  public long getEdgeCount() {
    return libgexfJNI.Graph_getEdgeCount(swigCPtr, this);
  }

  public long getDegree(long node_id) {
    return libgexfJNI.Graph_getDegree(swigCPtr, this, node_id);
  }

  public SWIGTYPE_p_std__setT_unsigned_int_t getNeighbors(long node_id) {
    return new SWIGTYPE_p_std__setT_unsigned_int_t(libgexfJNI.Graph_getNeighbors(swigCPtr, this, node_id), true);
  }

  public void clearEdges(long node_id) {
    libgexfJNI.Graph_clearEdges__SWIG_0(swigCPtr, this, node_id);
  }

  public void clear() {
    libgexfJNI.Graph_clear(swigCPtr, this);
  }

  public void clearEdges() {
    libgexfJNI.Graph_clearEdges__SWIG_1(swigCPtr, this);
  }

  public void readLock() {
    libgexfJNI.Graph_readLock(swigCPtr, this);
  }

  public void readUnlock() {
    libgexfJNI.Graph_readUnlock(swigCPtr, this);
  }

  public void writeLock() {
    libgexfJNI.Graph_writeLock(swigCPtr, this);
  }

  public void writeUnlock() {
    libgexfJNI.Graph_writeUnlock(swigCPtr, this);
  }

  public boolean isReadLock() {
    return libgexfJNI.Graph_isReadLock(swigCPtr, this);
  }

  public boolean isWriteLock() {
    return libgexfJNI.Graph_isWriteLock(swigCPtr, this);
  }

  public boolean isUnlock() {
    return libgexfJNI.Graph_isUnlock(swigCPtr, this);
  }

}
